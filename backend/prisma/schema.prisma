generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

// Auth
model User {
   id             String   @id
   createdAt      DateTime @default(now())
   email          String   @unique
   username       String   @unique
   name           String
   hashedPassword String
   avatarUrl      String?

   sessions       Session[]
   globalMessages GlobalMessage[]
   chatMessages   ChatMessage[]
   suggestedTopic Topic?          @relation("suggestedTopic")
   votedTopics    Topic[]
   chats          Chat[]
   createdChats   Chat[]          @relation("chatOwner")
}

model Session {
   id        String   @id
   userId    String
   expiresAt DateTime
   user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

// Chat
model GlobalMessage {
   id        String   @id @default(uuid())
   postedAt  DateTime @default(now())
   updatedAt DateTime @updatedAt
   content   String   @db.VarChar(2000)
   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
   userId    String
}

model ChatMessage {
   id        String   @id @default(uuid())
   postedAt  DateTime @default(now())
   updatedAt DateTime @updatedAt
   content   String   @db.VarChar(2000)
   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
   userId    String
   chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
   chatId    String
}

model Chat {
   id            String        @id @default(uuid())
   createdAt     DateTime      @default(now())
   lastMessageAt DateTime      @updatedAt
   name          String        @db.VarChar(100)
   description   String?       @db.VarChar(1024)
   icon          String?
   participants  User[]
   messages      ChatMessage[]
   // TODO: Fix onDelete
   owner         User          @relation("chatOwner", fields: [ownerId], references: [id], onDelete: Restrict)
   ownerId       String
}

// Topic voting
model Topic {
   id          String   @id @default(uuid())
   suggestedAt DateTime @default(now())
   title       String   @db.VarChar(100)
   description String?  @db.VarChar(1000)
   votes       Int      @default(1)
   author      User     @relation("suggestedTopic", fields: [authorId], references: [id], onDelete: Cascade)
   authorId    String   @unique
   voters      User[]
}

// Key-Value store
model KeyValue {
   key       String   @id
   value     Json
   updatedAt DateTime @updatedAt
}
